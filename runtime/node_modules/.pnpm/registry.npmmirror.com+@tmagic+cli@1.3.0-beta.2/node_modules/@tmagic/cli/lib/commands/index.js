"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scripts = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const Core_1 = tslib_1.__importDefault(require("../Core"));
const loadUserConfig_1 = require("../utils/loadUserConfig");
const scripts = (defaultAppConfig) => {
    const entry = async () => {
        if (process.env.NODE_ENV === undefined) {
            process.env.NODE_ENV = 'development';
        }
        // resolve user config file
        const userConfigPath = [
            path_1.default.resolve(defaultAppConfig.source, 'tmagic.config.ts'),
            path_1.default.resolve(defaultAppConfig.source, 'tmagic.config.js'),
            path_1.default.resolve(defaultAppConfig.source, 'tmagic.config.cjs'),
            path_1.default.resolve(defaultAppConfig.temp, 'config.ts'),
            path_1.default.resolve(defaultAppConfig.temp, 'config.js'),
            path_1.default.resolve(defaultAppConfig.temp, 'config.cjs'),
        ].find((item) => fs_extra_1.default.pathExistsSync(item));
        const { npmConfig = {}, ...userConfig } = await (0, loadUserConfig_1.loadUserConfig)(userConfigPath);
        // resolve the final app config to use
        const appConfig = {
            ...defaultAppConfig,
            ...userConfig,
            npmConfig: {
                ...(defaultAppConfig.npmConfig || {}),
                ...npmConfig,
            },
        };
        // create vuepress app
        const app = new Core_1.default(appConfig);
        // clean temp and cache
        if (appConfig.cleanTemp === true) {
            await fs_extra_1.default.remove(app.dir.temp());
        }
        // initialize and prepare
        await app.init();
        await app.prepare();
        return app;
    };
    return entry;
};
exports.scripts = scripts;
//# sourceMappingURL=index.js.map