{"version":3,"file":"tmagic-schema.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * Tencent is pleased to support the open source community by making TMagicEditor available.\n *\n * Copyright (C) 2023 THL A29 Limited, a Tencent company.  All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type Method = 'get' | 'GET' | 'delete' | 'DELETE' | 'post' | 'POST' | 'put' | 'PUT';\n\nexport interface HttpOptions {\n  url: string;\n  params?: Record<string, string>;\n  data?: Record<string, any>;\n  headers?: Record<string, string>;\n  method?: Method;\n  [key: string]: any;\n}\n\nexport type RequestFunction = (options: HttpOptions) => Promise<any>;\n\nexport interface AppCore {\n  dsl?: MApp;\n  platform?: string;\n  jsEngine?: string;\n  request?: RequestFunction;\n  [key: string]: any;\n}\n\nexport enum NodeType {\n  CONTAINER = 'container',\n  PAGE = 'page',\n  ROOT = 'app',\n}\n\nexport type Id = string | number;\n\n// 事件联动的动作类型\nexport enum ActionType {\n  /** 联动组件 */\n  COMP = 'comp',\n  /** 联动代码 */\n  CODE = 'code',\n  /** 数据源 */\n  DATA_SOURCE = 'data-source',\n}\n\nexport interface DataSourceDeps {\n  [dataSourceId: string | number]: Dep;\n}\n\n/** 事件类型(已废弃，后续不建议继续使用) */\nexport interface DeprecatedEventConfig {\n  /** 待触发的事件名称 */\n  name: string;\n  /** 被选中组件ID */\n  to: Id;\n  /** 触发事件后执行被选中组件的方法 */\n  method: string;\n}\n\nexport interface EventConfig {\n  /** 待触发的事件名称 */\n  name: string;\n  /** 动作响应配置 */\n  actions: EventActionItem[];\n}\n\nexport interface CodeItemConfig {\n  /** 动作类型 */\n  actionType: ActionType;\n  /** 代码ID */\n  codeId: Id;\n  /** 代码参数 */\n  params?: object;\n}\n\nexport interface CompItemConfig {\n  /** 动作类型 */\n  actionType: ActionType;\n  /** 被选中组件ID */\n  to: Id;\n  /** 触发事件后执行被选中组件的方法 */\n  method: string;\n}\n\nexport interface DataSourceItemConfig {\n  /** 动作类型 */\n  actionType: ActionType;\n  /** [数据源id, 方法] */\n  dataSourceMethod: [string, string];\n  /** 代码参数 */\n  params?: object;\n}\n\nexport type EventActionItem = CompItemConfig | CodeItemConfig | DataSourceItemConfig;\n\nexport interface MComponent {\n  /** 组件ID，默认为${type}_${number}}形式, 如：page_123 */\n  id: Id;\n  /** 组件类型 */\n  type?: string;\n  /** 组件显示名称 */\n  name?: string;\n  /** 组件根Dom上的class */\n  className?: string;\n  /* 关联事件集合 */\n  events?: EventConfig[] | DeprecatedEventConfig[];\n  /** 组件根Dom的style */\n  style?: {\n    [key: string]: any;\n  };\n  [key: string]: any;\n}\n\nexport interface MContainer extends MComponent {\n  /** 容器类型，默认为'container' */\n  type?: NodeType.CONTAINER | string;\n  /** 容器子元素 */\n  items: (MComponent | MContainer)[];\n}\n\nexport interface MPage extends MContainer {\n  /** 页面类型 */\n  type: NodeType.PAGE;\n}\n\nexport interface MApp extends MComponent {\n  /** App页面类型，app作为整个结构的根节点；有且只有一个 */\n  type: NodeType.ROOT;\n  /** */\n  items: MPage[];\n  /** 代码块 */\n  codeBlocks?: CodeBlockDSL;\n\n  dataSources?: DataSourceSchema[];\n\n  dataSourceDeps?: DataSourceDeps;\n  dataSourceCondDeps?: DataSourceDeps;\n}\n\nexport interface CodeBlockDSL {\n  [id: Id]: CodeBlockContent;\n}\n\nexport interface CodeBlockContent {\n  /** 代码块名称 */\n  name: string;\n  /** 代码块内容 */\n  content: ((...args: any[]) => any) | string;\n  /** 参数定义 */\n  params: CodeParam[] | [];\n  /** 注释 */\n  desc?: string;\n  /** 扩展字段 */\n  [propName: string]: any;\n}\n\nexport interface CodeParam {\n  /** 参数名 */\n  name: string;\n  /** 扩展字段 */\n  [propName: string]: any;\n}\n\nexport interface PastePosition {\n  left?: number;\n  top?: number;\n}\n\nexport type MNode = MComponent | MContainer | MPage | MApp;\n\nexport enum HookType {\n  /** 代码块钩子标识 */\n  CODE = 'code',\n}\n\nexport interface DataSchema {\n  type?: 'null' | 'boolean' | 'object' | 'array' | 'number' | 'string' | 'any';\n  /** 键名 */\n  name: string;\n  /** 展示名称 */\n  title?: string;\n  /** 实体描述，鼠标hover时展示 */\n  description?: string;\n  /** 默认值 */\n  defaultValue?: any;\n  /** 是否可用 */\n  enable?: boolean;\n  /** type === 'object' || type === 'array' */\n  fields?: DataSchema[];\n}\n\nexport interface DataSourceSchema {\n  /** 数据源类型，根据类型来实例化；例如http则使用new HttpDataSource */\n  type: string;\n  /** 实体ID */\n  id: string;\n  /** 实体名称，用于关联时展示 */\n  title?: string;\n  /** 实体描述，鼠标hover时展示 */\n  description?: string;\n  /** 字段列表 */\n  fields: DataSchema[];\n  /** 方法列表 */\n  methods: CodeBlockContent[];\n  /** 扩展字段 */\n  [key: string]: any;\n}\n\nexport interface Dep {\n  [nodeId: Id]: {\n    /** 组件名称 */\n    name: string;\n    keys: (string | number)[];\n  };\n}\n"],"names":["NodeType","ActionType","HookType"],"mappings":"AAsCY,IAAAA,sBAAAA,OACVA,EAAA,YAAY,aACZA,EAAA,OAAO,QACPA,EAAA,OAAO,OAHGA,IAAAA,KAAA,CAAA,CAAA,GASAC,sBAAAA,OAEVA,EAAA,OAAO,QAEPA,EAAA,OAAO,QAEPA,EAAA,cAAc,eANJA,IAAAA,KAAA,CAAA,CAAA,GAsIAC,sBAAAA,OAEVA,EAAA,OAAO,QAFGA,IAAAA,KAAA,CAAA,CAAA;"}